#!/usr/bin/env pinpoint

[font=Sans 60px]
[duration=45.0]
-- [text-align=center] [duration=36.0]
<big>Designing Koha for Support-ability</big>

Barton Chittenden

ByWater Solutions

# Hi, My name is Barton Chittenden,
#
# I do technical support for ByWater Solutions.
#
# I'd like to talk about Koha from the
# perspective of someone who does technical support,
# and show how that fits in with the design of Koha.
#
# So, before we go any further,
# I would like you to think about your
# last experience with a tech support phone call.
#
# Raise your hands if the experience included

-- [duration=9.0]
Pressing phone buttons
in an IVR system?

# ... Pressing phone buttons in an IVR system?
#
# Keep your hands up if you experienced 
-- [duration=5.0]
A long wait on hold

# ... A long wait on hold
#
# What about ...
-- [duration=12.0]
# ... Hearing the phrase 
# "I'm sorry you're having trouble with your ..."
# ... cable mode, router, phone service...
#
Hearing the phrase
"I'm sorry you're having
trouble with your ..."

# Ok, I'm going to give your arms a break ... put your hands down if
-- [duration=6.0]
# ... You were happy with your tech support call
You were happy with your
tech support call

-- [duration=6.0]
# ... You felt like the person on the other
# end of the line was really listening

You felt like the person on
the other end of the line was
really listening

-- [duration=37.0]
# ... you *really* felt like the person
# on the other end of the call was sorry.
#
# Ok, go ahead and put your hands down.
You <i>really</i> felt like
the person on the other end
of the call was sorry.

# 
# The underlying problem is that when you call
# into an enormous phone center, you're going to
# be talking to someone who is taking 150 calls a day,
# and who has been turned into a robot,
# dealing with the same problems over and over again.
#
# This isn't a good experience for anyone involved.
#
# One of the reasons for this is that...

-- [duration=28.0]
# Computers can cause problems faster than people
# can solve them.
#
"A computer lets you make
more mistakes faster than
any other invention with
the possible exceptions of
handguns and Tequila."

 -- Mitch Ratcliffe

# In a previous life, I did support for a VoIP product, a lot like Vonage.
# We had a feature that we rushed into production, 
#

-- [duration=7.0]
# This feature didn't get adequately tested at scale,
This feature didn't get
adequately tested at scale,

# and it ended up crashing the entire phone network
-- [images/VOiP.png] [duration=5.0]
# every 20 seconds. 

-- [duration=5.0]
#  It took operations 3 days to figure this out.

It took operations 3 days to
figure this out.

-- [duration=14.0]
The whole time, I was left
saying "I'm sorry you're
having trouble with your
VoIP."
#  The whole time, I was left saying
#  "I'm sorry you're having trouble with your VoIP.
#  Yes, we are aware of this issue;
#  I don't have a resolution at this time".
#
-- [duration=5.0]
#  Those were the three longest days of my life in tech support.
Those were the three longest
days of my life in tech
support.

-- [duration=5.0]
#  It sucked my compassion dry.
It sucked my compassion dry.

-- [images/stress_range.png] [duration=11.0] [bottom-left] [font=Sans 30px]
If VOiP melt down is here

# If the taking down an entire telecom
# VoIP system every 20 seconds is on
# the extreme Left,

-- [images/stress_range.png] [duration=63.0] [bottom] [font=Sans 30px]

Koha lives about here ^

# Koha lives about here ^
#
# Then koha is about two thirds of the way to the right.
#
# Because Koha is a mature open source project with an
# excellent QA team, and because it's deployed it's deployed
# on lots of of small servers rather than one large server,
# it's unlikely that we will get hit with a catastrophic
# affecting everyone at once.
#
# However, one or more bad bugs in a major release can create
# a slow motion version of a support melt-down, where support
# staff is not overwhelmed in a single day, but worn down over
# a period of time.
# 
# Tech support is a human endeavor, and it only works when
# the people doing it have the time, energy and patience
# to pay attention.
#
# The effects on our compassion, our ability to listen and
# communicate effectively are diminished.

-- [images/stress_range.png] [duration=15.0] [bottom-right] [font=Sans 30px]

We want to get here ^

# This talk is aimed at looking at some of the design decisions that would
# make Koha a little easier to support, either for a systems librarian at
# a site which has their own Koha instance, or for a support vendor. In
# essence, our goal is to be able to support koha with kindness,
# compassion and to be entirely present to those who we're helping.

-- [duration=5.0]
The Elements of
technical support

* Communication
# What do support people do?
#
# * Communication
#
#   At ByWater, we use the term 'reference interview' 
#   -- similar to the usage at a reference desk.
#   We focus on broad, non-leading questions, trying
#   to determine what the partner wants and expects,
#   and how that differs from their experience.

-- [duration=5.0]
The Elements of
technical support

* Communication
* Classifying issues
# Classifying issues:
#
# We try to 
# * Assess the urgency and importance of the issue
# * Categorize the issue to find similar problems
#   -- perhaps the problem has already been solved.
# * Figure out if this is a bug or a feature
# * Figure out what additional questions to ask
# * Find the right person to solve the problem

-- [duration=5.0]
The Elements of
technical support

* Communication
* Classifying issues
* Replicating issues
# Replicating issues
#
# If we can see the problem and make it happen,
# we know that we have effective communication
# This also makes troubleshooting easier

-- [duration=5.0]
The Elements of
technical support

* Communication
* Classifying issues
* Replicating issues
* Trouble-shooting
# Trouble-shooting
#
# We want to get to the root cause of the issue,
# and find a solution, or at least a work-around
# in the case of a bug.


-- [duration=5.0]
What are the challenges?

# Let's look at some of the challenges that make
# each of these elements difficult.

-- [duration=5.0]
Communication

* Confusing interfaces

# An example of this would be the rules for lost statuses.
# The behavior of lost items depends on
#
# * System preferences
# * Authorized values
# * Arguments in the cron file
# * Lost status of the item itself
# * Where the lost status is set
#     * The last of these was a bug, people started depending
#       on its behavior, and now we have a system preference
#       that restores the buggy behavior, because it's a known
#       way to bypass refunding a lost item fee.
#
# The rules that define when a lost item fee is charged are
# not *explicitly* defined anywhere.

-- [duration=5.0]
Communication

* Confusing interfaces
* Interfaces that are difficult to describe

# The pages under Acquisitions are visually very similar.
# It's not clear how these pages relate to each other 

-- [duration=5.0]
Classifying problems

# It's not always easy to see from the initial description
# of a problems.
#
# Good error messages make categorization easier, but these
# are hidden in plack.
#
# Bread crumbs, Perl file names, and labels should all agree
#
# Perl file names and error messages are not indexed or
# search-able in bugzilla
#
# There can be a dis-connect between the structure of Koha
# and the structure of Bugzilla
#
# Hard to figure out of a problem is a bug or misunderstanding
# of a feature

-- [duration=5.0]
Replicating issues

# Not obvious what configuration triggers a problem.
#
# This makes is it easy to end up with a problem to re-create
# because of a hidden configuration -- or worse, that
# *others* can't re-create.
#
# Don't always have initial state -- for instance holds.
# Capturing a hold, or running the holds queue builder
# change the state of the data. By the time that the
# problem presents itself, we're in the dark.
#
# Intermittent issues (this is actually special case of
# the above)
#
# Hard to know what the smallest amount of data is needed
# to replicate an issue.

-- [duration=5.0]
Trouble-shooting

# Some parts of the Koha code base, for example
# the holds queue builder or the internals of
# Search.pm are what Kyle calls 'Scary Basements'.
# 
# The internals are not well documented or understood
# by the community at large. Sometimes these were
# written by people who are no longer in the community,
# In other cases the complexity has grown over time
# to the point where no one knows exactly
# what the functionality is.
#
# Sometimes we run into intermittent problems, and
# we don't have a large enough sample of data to
# spot a trend -- we essentially have to say "that
# this is a glitch", and move on.
# 
# Some software errors are caused by data that
# violates Koha's data integrity -- this is
# increasingly common as we move toward Koha
# objects -- places where the previous code
# would have silently ignored data problems
# now cause fatal errors.
#
# When trouble shooting gets down to the level
# where people in support have to read source
# code, this becomes very slow -- when a developer
# takes three hours to read a piece of code that
# they're not familiar with, that's probably not
# critical. When someone in a tech support
# position does the same, it's because
# someone is waiting to know why Koha worked
# this way or that, and three hours may
# be critical.

-- [duration=5.0]
What can we do to make this
easier?

-- [duration=5.0]
Communication

# The user interface should be
# explicit about the effects of
# users actions.
# 
# The configuration of like
# things should be grouped
# together, to avoid spooky
# action at a distance
# 
# User interfaces should use
# a controlled vocabulary that
# is consistent from database
# table and field names, bread
# crumb names, link text and
# Perl controller names.  If we
# have a controlled vocabulary,
# it becomes easier for support
# to ask for clarification
# using that vocabulary.
# 
# Features should be clearly
# and strictly documented so
# that it's clear not only what
# the software does, but what
# it does *not* do.

-- [duration=5.0]
Classification

# Wherever possible, the
# classification of bugs and
# errors should follow what the
# user sees.

# I had a European history
# teacher in high school. We
# were talking about the
# succession of kings,
# and the importance of male
# heirs... she looked up at us
# with a twinkle in her eye,
# and said "Among the Choctaw,
# we don't trace lineage
# through the father. You don't
# always know who the father
# is. But you *always* know who
# the mother is.

# Error messages should be sent
# to the screen. The user needs
# to see more than "Software error"

-- [duration=5.0]
Replication

# Make configuration explicit
# 
# Make it easy to pull together data and
# configuration which causes the problem
# 
# Make it easy (or at least possible)
# to find the initial state of of data
# before a problem occurs.
# 
# Have the system log the steps that lead
# up to a problem -- essentially emitting
# a problem description or test plan.

-- [duration=5.0]
Improving trouble shooting

# Eliminate scary basements -- Document
# code, re-factor code for clarity. Shout
# out to Jonathan, who has moved so much
# code into the Koha namespace.
# 
# I can read the source code, which tells
# me *what* is happening, but reading the
# code will not tell me *why*. Document
# this.
# 
# Whenever code makes assumptions about
# data, write a query that we can use as
# a data checker.
# 
# Intermittent issues can be found
# by logging. We need to start using
# Koha::Logger.

-- [duration=5.0]
Conclusion

# Technical support lives with
# the constant threat of computers
# making more mistakes than they
# can handle, on one hand, and
# being kind, compassionate individuals who listen and fully process and understand what each partner request, problem or issue.
# We're part of the community.

-- [duration=5.0]
Questions?
